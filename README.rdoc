most of the code was stolen from here: http://github.com/pc/vpnmaker, thank you!
i made a gem, converted it to use haml, added bin/vpnmaker cli
= VPNMaker

VPNMaker takes the teetering jankiness out of setting up and administering OpenVPN.

It comes without any guarantees, the code seems to work for me, your mileage will invariably vary!
== Usage
* vpnmaker -h is your best friend
help format sucks, but it's better then using easy-rsa or doing openssl by hand
== Example
>>#vpnmaker init cli conf_name new_dir_path country province city organization organization_unit common_name key_name email

== From the forked version:
=== Key management

To set up your VPN, run:

  irb -r vpnmaker
  >> VPNMaker.generate('foocorp', '/root')

Which will place <tt>foocorp.vpn</tt> in <tt>/root</tt>. All of the files that OpenVPN needs will be placed in <tt>/root/foocorp.vpn/foocorp_data</tt>.

Next, you should create <tt>foocorp.config.yaml</tt> in <tt>/root/foocorp.vpn</tt>. It should look something like this:

  :key_properties:
    :country: US
    :province: CA
    :city: San Francisco
    :organization: FooCorp Inc
    :email: security@foocorp.com

The values in <tt>foocorp.config.yaml</tt> will be used to generate keys and OpenVPN configuration files.

Administration tasks are carried out with <tt>VPNMaker::Manager</tt>.

Creating the Certificate Authority is the first order of business. You'll want to keep its keys safe from both intruders and data loss.

  >> mgr = VPNMaker::Manager.new('/root/foocorp.vpn')
  >> mgr.build_ca

Behind the scenes, this will create <tt>ca.crt</tt>, <tt>ca.key</tt>, <tt>crl.pem</tt>, <tt>dh.pem</tt>, <tt>index.txt</tt> and <tt>serial</tt> in the <tt>foocorp_data</tt> directory. Respectively these are: the public certificate for the CA that every user should get; the private key for signing other certs that should be kept safe; a certificate revocation file you'll need to revoke signed certificates (e.g. after a laptop is compromised); an encryption key for the server side of the VPN connection; a file for OpenSSL to track key state that you should never need to touch; and another file that OpenSSL uses for tracking key IDs that you shouldn't have to worry about.

Now that we have a Certificate Authority, we should create a server certificate:

  >> mgr.build_server

This creates <tt>server.key</tt> and <tt>server.crt</tt> in the <tt>foocorp_data</tt> directory, both of which are for distribution only to the VPN server. It also creates <tt>dh.key</tt> and <tt>ta.key</tt>. The first of these is a key for creating TLS connections on the server; the second is a key shared between both the server and clients that provides some additional security. (See the tls-auth section at http://openvpn.net/index.php/open-source/documentation/howto.html for more details.)

Next, we can create our first user:

  >> mgr.create_user('joe', 'Joe Bloggs', 'joe.bloggs@foocorp.com', 'password')
  >> mgr.users
  => ['joe']
  >> mgr.user('joe')
  => {:user=>"joe", :revoked=>[], :email=>"joe.bloggs@foocorp.com", :name=>"Joe Bloggs", :modified=>Mon Oct 11 10:42:44 -0700 2010, :active_key=>0}

The most important thing to note here is that Joe Bloggs has no revoked keys, and that his active key is version 0. We can go ahead and give <tt>joe-0.key</tt> and <tt>joe-0.crt</tt> to Joe. (They'll be in the <tt>foocorp_data</tt> directory.)

Now say Joe loses his laptop. We need to both disable his old key and give him a new one:

  >> mgr.regenerate_user('joe', 'newpassword')

This will create new keys for Joe, and update the server's <tt>crl.pem</tt> revocation file. If we check the database, we see that his <tt>active_key</tt> is now <tt>1</tt>, while <tt>0</tt> has been added to the list of revoked keys:

  >> mgr.user('joe')
  => {:user=>"joe", :revoked=>[0], :email=>"joe.bloggs@foocorp.com", :name=>"Joe Bloggs", :modified=>Mon Oct 11 10:42:44 -0700 2010, :active_key=>1}
We should now go ahead and distribute <tt>joe-1.key</tt> and <tt>joe-1.crt</tt> to Joe, as well as make sure our OpenVPN servers get the latest version of the <tt>crl.pem</tt> revocation file.

When Joe leaves the company, we can do:

  >> mgr.delete_user('joe')
  >> mgr.user('joe')
  => {:user=>"joe", :revoked=>[0, 1], :email=>"joe.bloggs@foocorp.com", :name=>"Joe Bloggs", :modified=>Mon Oct 11 11:32:10 -0700 2010, :active_key=>1}

Which does the same revocation as in <tt>regenerate_user</tt>, but doesn't generate new keys.

=== OpenVPN management

To get OpenVPN set up, you should go back and edit <tt>foocorp.config.yaml</tt>, and add the following section:

  :server:
    :base_ip: 10.10.10.0
    :user: nouser
    :group: nogroup
    :root: /root/openvpn
    :log: /var/log/openvpn.log
    :host: foocorp.com
    :port: 1194

You may want to modify some of the values. Then, head back to irb, and do something like:

  >> puts mgr.config_generator.server

Which will output a config file that you can copy and paste into <tt>openvpn.conf</tt> on your server. You'll want make sure that the following files exist in <tt>/root/openvpn</tt> (or whatever your root directory is): <tt>ca.crt</tt> (so that the server can verify the validity of client certificates), <tt>dh.pem</tt> (for encryption of the connection), <tt>server.crt</tt> (the server's public key), <tt>server.key</tt> (the server's private key), <tt>ta.key</tt> (shared secret between server and clients), and <tt>crl.pem</tt> (so that the server will reject revoked certificates).

=== OpenVPN client

Each client will need: <tt>user.key</tt>, <tt>user.crt</tt>, <tt>ca.crt</tt> and <tt>ta.key</tt>. Make sure to enable tls-auth = 1.

== Testing

Tests are done with Rspec.  To run the tests simply run `bundle exec rake test` or `bundle exec rake spec`.